
### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

### brew
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# setting path {{{1
export PATH=$PATH:/usr/local/bin:/bin:/usr/bin:$GOROOT/bin:$GOPATH/bin:/home/takets/bin:/home/takets/.bin:/home/takets/.deno/bin:/home/takets/.cargo/bin

export EDITOR=vim
export GOROOT=/usr/local/opt/go/libexec
export GOPATH=$HOME/go
export PYENV_ROOT=$HOME/.pyenv
export NEXTWORD_DATA_PATH=~/tmp/nextword-data-large
export NVIM_NODE_LOG_LEVEL=info
export FZF_PREVIEW_DEBUG=1
export DENOPS_TEST_VIM=/usr/local/bin/vim
export DENOPS_TEST_DENOPS_PATH=/home/takets/.config/nvim/plugged/denops.vim
export DENOPS_TEST_NVIM=/usr/local/bin/nvim
export RIPGREP_CONFIG_PATH=$HOME/.config/ripgrep/rc
export LESS='-g -i -M -R -S -W -z-4 -x4'
# }}}1

# standard settings {{{1
stty stop undef

# 色を使用
autoload -Uz colors

# 補完
autoload -Uz compinit
compinit

# emacsキーバインド
bindkey -e

# 他のターミナルとヒストリーを共有
setopt share_history

# ヒストリーに重複を表示しない
setopt histignorealldups

HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

# cdコマンドを省略して、ディレクトリ名のみの入力で移動
setopt auto_cd

# 補完候補が複数ある時に、一覧表示
setopt auto_list

# auto_list の補完候補一覧で、ls -F のようにファイルの種別をマーク表示
setopt list_types

# コマンドが入力されるとすぐに追加
setopt inc_append_history

# 自動でpushdを実行
setopt auto_pushd

# pushdから重複を削除
setopt pushd_ignore_dups

# コマンドミスを修正
setopt correct

#プロンプトの自動リロード
autoload -U promptinit
promptinit

# Googleライクにサジェスト #
setopt correct
SPROMPT="( ´・ω・) ＜ %{$fg[blue]%}も%{${reset_color}%}%{$fg[red]%}し%{${reset_color}%}%{$fg[yellow]%}か%{${reset_color}%}%{$fg[green]%}し%{${reset_color}%}%{$fg[red]%}て%{${reset_color}%}: %{$fg[red]%}%r%{${reset_color}%}？ [(y)es,(n)o,(a)bort,(e)dit]
-> "

# 補完後、メニュー選択モードになり左右キーで移動が出来る
zstyle ':completion:*:default' menu select=2

# 補完で大文字にもマッチ
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

alias ls="ls -GF"
alias gls="gls --color"

zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'
# zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z} r:|[-_.]=**'


fpath=(/usr/local/share/zsh-completions ${fpath})
# }}}1

# alias {{{1
function wezterm_neovim() {
  if [ -d "/home/ttakeda" ]; then
    /opt/homebrew/bin/nvim  $1 $2 ~/work
  elif [ -d "/home/takets" ]; then
    /home/linuxbrew/.linuxbrew/bin/nvim $1 $2
  else
    /usr/local/bin/nvim $1 $2 ~/wezterm
  fi
}
alias n='wezterm_neovim'


alias ll='eza --long --header --git  --sort=type --classify --git'
alias la='eza --long --header --git --grid --classify --sort=type --git'
alias phpctags='/usr/local/bin/phpctags'
alias ...='cd ../../'
alias ....='cd ../../../'
alias v='/home/linuxbrew/.linuxbrew/bin/nvim'
alias yolo="claude --dangerously-skip-permissions"
alias python3='/home/linuxbrew/.linuxbrew/bin/python3'
alias pip3='/home/linuxbrew/.linuxbrew/bin/pip3'
# }}}1


autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit


zinit light zsh-users/zsh-autosuggestions
zinit ice pick"async.zsh" src"pure.zsh"
zinit light sindresorhus/pure
zinit light zdharma-continuum/fast-syntax-highlighting
zinit ice pick"async.zsh" src"pure.zsh"
zinit light sindresorhus/pure
zinit ice from"gh-r" as"program"
zinit load junegunn/fzf-bin
zinit load rupa/z

zinit light mollifier/cd-bookmark
autoload -Uz cd-bookmark
alias b='cd-bookmark'

zi ice has'zoxide' atinit'zmodload zsh/zprof' \
  atload'zprof | head -n 20; zmodload -u zsh/zprof'
zi light z-shell/zsh-zoxide

export DENO_INSTALL="/home/linuxbrew/.linuxbrew"
export PATH="$DENO_INSTALL/bin:$PATH:/home/takets/.local/bin"

# zeno
zinit ice lucid depth"1" blockf
zinit light yuki-yano/zeno.zsh

# default
# git folder preview with color
export ZENO_GIT_TREE="exa --tree"
export ZENO_GIT_CAT="bat --color=always"
export ZENO_HOME=~/.config/zeno
export ZENO_FZF_TMUX_OPTIONS="-p"


if [[ -n $ZENO_LOADED ]]; then
  snippet_and_completion() {
    zeno-auto-snippet
    zeno-completion
  }
  zle -N snippet_and_completion
  bindkey '^x^x' snippet_and_completion

  bindkey '^u'  zeno-auto-snippet
  bindkey '^o' zeno-auto-snippet-and-accept-line
  bindkey '^i' zeno-completion
  bindkey '^x^s' zeno-insert-snippet
  export ZENO_COMPLETION_FALLBACK=expand-or-complete
fi


export FZF_DEFAULT_COMMAND'=rg --files --hidden --follow --glob "!.git/*"'
export FZF_DEFAULT_OPTS='--height 80% --reverse'


function select-history() {
BUFFER=$(history -n -r 1 | fzf --no-sort +m --query "$LBUFFER" --prompt="History > ")
CURSOR=$#BUFFER
}
zle -N select-history
bindkey '^r' select-history

# 移動したディレクトリ検索(Ctrl+Z)
fzf-z-search() {
    local res=$(z | sort -rn | cut -c 12- | fzf --ansi --no-sort --reverse)
    if [ -n "$res" ]; then
        BUFFER+="cd $res"
        zle accept-line
    else
        return 1
    fi
}
zle -N fzf-z-search
bindkey '^Z' fzf-z-search

# fzf
# Project
function f() {
  local project dir repository session current_session
  dir=$(ghq list -p | sed -e "s|${HOME}|~|" | fzf-tmux -p 70%,70% --prompt='Project> ' --preview "bat \$(eval echo {})/README.md" --bind ctrl-d:preview-page-down,ctrl-u:preview-page-up)

  if [[ $dir == "" ]]; then
    return 1
  fi

  if [[ ! -z ${TMUX} ]]; then
    repository=${dir##*/}
    session=${repository//./-}
    current_session=$(tmux list-sessions | grep 'attached' | cut -d":" -f1)

    if [[ $current_session =~ ^[0-9]+$ ]]; then
      eval cd "${dir}"
      tmux rename-session $session
    else
      tmux list-sessions | cut -d":" -f1 | grep -e "^${session}\$" > /dev/null
      if [[ $? != 0 ]]; then
        tmux new-session -d -c $(eval echo "${dir}") -s $session
      fi
      tmux switch-client -t $session
    fi
  else
    eval cd "${dir}"
  fi
}

# docker
fde() {
  local cid
  cid=$(docker ps | sed 1d | fzf -q "$1" | awk '{print $1}')
  [ -n "$cid" ] && docker exec -it "$cid" /bin/bash
}

fdc() {
    docker-compose exec $(docker-compose config --services | fzf) bash
}

# カレント以下のコマンドやパスを取得
fzf_find_path() {
  # 現在のコマンドラインの状態を保存
  local original_lbuffer=$LBUFFER

  if [[ $LBUFFER == cd\ * ]]; then
    # 'cd'コマンドの場合はディレクトリのみを検索
    local path_prefix=${LBUFFER#cd }
    # 特殊文字を含むパスを正しく展開
    local expanded_path_prefix=$(eval echo $path_prefix)
    local selected_path=$(find "$expanded_path_prefix"* -type d 2> /dev/null | fzf)
  else
    local current_buffer=$LBUFFER
    local command_prefix=${current_buffer%% *}
    local path_prefix=${current_buffer#$command_prefix }
    local expanded_path_prefix=$(eval echo $path_prefix)
    local selected_path=$(find "$expanded_path_prefix"* -type f -o -type d 2> /dev/null | fzf)
  fi

  if [[ -n $selected_path ]]; then
    if [[ $LBUFFER == cd\ * ]]; then
      local trimmed_selected_path=${selected_path#$expanded_path_prefix}
      LBUFFER+="$trimmed_selected_path"
    else
      LBUFFER="$command_prefix $selected_path"
    fi
  else
    # fzfがキャンセルされた場合、元の状態を復元
    LBUFFER=$original_lbuffer
  fi
}

# Ctrl+t のキーバインドを設定
zle -N fzf_find_path
bindkey '^t' fzf_find_path


# zsh-autosuggestions {{{
ZSH_AUTOSUGGEST_USE_ASYNC=1
# }}}


# fast-syntax-highlighting {{{
function set_fast_theme() {
  FAST_HIGHLIGHT_STYLES[alias]='fg=blue'
  FAST_HIGHLIGHT_STYLES[suffix-alias]='fg=blue'
  FAST_HIGHLIGHT_STYLES[builtin]='fg=blue'
  FAST_HIGHLIGHT_STYLES[function]='fg=blue'
  FAST_HIGHLIGHT_STYLES[command]='fg=blue'
  FAST_HIGHLIGHT_STYLES[precommand]='fg=blue,underline'
  FAST_HIGHLIGHT_STYLES[hashed-command]='fg=blue'
  FAST_HIGHLIGHT_STYLES[path]='fg=green'
  FAST_HIGHLIGHT_STYLES[globbing]='fg=green,bold'
  FAST_HIGHLIGHT_STYLES[history-expansion]='fg=green,bold'
}
# }}}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# eval "$(zoxide init zsh)"
eval "$(zoxide init --cmd j zsh)"
