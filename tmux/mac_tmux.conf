# tmuxを256色表示できるようにする
# set-option -g default-terminal screen-256color
set -ga terminal-overrides 'xterm:colors=256'
set -as terminal-features ",gnome*:RGB"
set-option -sa terminal-overrides ",xterm*:Tc"

# set-option -g default-terminal "tmux-256color" # 基本的にはscreen-256colorかtmux-256colorを設定
# set-option -ga terminal-overrides ",$TERM:Tc" # tmuxを起動していない時のzshでの$TERMの値を指定


# prefixキーをC-tに変更する（好み）
set -ga prefix ^h

# # C-bのキーバインドを解除
unbind C-b

# ステータスバーを1秒毎に描画し直す
set-option -g status-interval 1

# # センタライズ（主にウィンドウ番号など）
# set-option -g status-justify centre

# ステータスバーの色を設定する

# status line の文字色を指定する。

# split window

# vimのキーバインドでペインを移動する
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# vimのキーバインドでペインをリサイズする
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# change last window
bind C-h last-window

# マウス操作を有効にする
set-option -g mouse on

# 番号基準値を変更
set-option -g base-index 1

# ESCキーの反応を短くする
set -s escape-time 0

# ペインボーダーの色を設定する
set -g pane-border-style fg=green,bg=black
# アクティブなペインを目立たせる
set -g pane-active-border-style fg=white,bg=yellow

set -g focus-events on
set -g status-style bg=default
set -g status-left-length 90
set -g status-right-length 90
set -g status-justify absolute-centre

set -g status-right "#[fg=colour255,bg=colour241] %Y%b-%d %l:%M"
## status line の背景色を指定する。
set-option -g status-bg "colour238"
## status line の文字色を指定する。
set-option -g status-fg "colour255"
# ## status-left の最大の長さを指定する。
# set-option -g status-left-length 10
## status-left のフォーマットを指定する。
set-option -g status-left "#[fg=colour255,bg=colour241]Session: #S #[default]"
# ## status-right の最大の長さを指定する。
# set-option -g status-right-length 120
## status-right format 


# window names
setenv -g FGC colour4
set -g window-status-current-format "#[fg=#{FGC}]#[fg=colour7,bg=#{FGC}]\[👉#I:#W\]#[fg=#{FGC},bg=default]"
set -g window-status-format "#[fg=colour244]#[fg=default,bg=colour244]\[#I:#W\]#[fg=colour244,bg=default]"

# ## window-status のフォーマットを指定する。
# set-window-option -g window-status-format " #I: #W "
# ## カレントウィンドウの window-status のフォーマットを指定する
# set-window-option -g window-status-current-format "#[fg=colour255,bg=colour27,bold] #I: #W #[default]"


## ヴィジュアルノーティフィケーションを有効にする
setw -g monitor-activity on
set -g visual-activity on

set-window-option -g mode-keys vi
setw -g mode-keys vi
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"

######
#!/bin/bash
#
# Cursor-aware pane selection for tmux
# This script selects a pane based on the cursor position when moving between panes
#
# Usage: tmux-smart-pane-switch <direction>
# where <direction> is one of: left, right, up, down, L, R, U, D

set -euo pipefail

# Get direction from argument
DIRECTION="${1:-}"
if [ -z "$DIRECTION" ]; then
    echo "Usage: $0 {left|right|up|down|L|R|U|D}"
    exit 1
fi

# Normalize direction
case "$DIRECTION" in
    left|L) DIRECTION="L" ;;
    right|R) DIRECTION="R" ;;
    up|U) DIRECTION="U" ;;
    down|D) DIRECTION="D" ;;
    *)
        echo "Invalid direction: $DIRECTION"
        exit 1
        ;;
esac

# Get current pane info
CURRENT_PANE=$(tmux display-message -p '#{pane_id}')
CURSOR_Y=$(tmux display-message -p '#{cursor_y}')
PANE_TOP=$(tmux display-message -p '#{pane_top}')
PANE_HEIGHT=$(tmux display-message -p '#{pane_height}')
PANE_LEFT=$(tmux display-message -p '#{pane_left}')
PANE_WIDTH=$(tmux display-message -p '#{pane_width}')

# Calculate absolute cursor Y position in the window
ABSOLUTE_CURSOR_Y=$((PANE_TOP + CURSOR_Y))

# Get all panes info
# Format: pane_id pane_left pane_top pane_width pane_height
PANES_INFO=$(tmux list-panes -F "#{pane_id} #{pane_left} #{pane_top} #{pane_width} #{pane_height}")

# Function to find the best pane based on cursor position
find_best_pane() {
    local direction="$1"
    local best_pane=""
    local best_distance=999999
    
    while IFS=' ' read -r pane_id pane_left pane_top pane_width pane_height; do
        # Skip current pane
        [ "$pane_id" = "$CURRENT_PANE" ] && continue
        
        case "$direction" in
            L)
                # Moving left: find panes to the left
                if [ "$pane_left" -lt "$PANE_LEFT" ]; then
                    # Check if cursor Y position falls within this pane's vertical range
                    local pane_bottom=$((pane_top + pane_height))
                    if [ "$ABSOLUTE_CURSOR_Y" -ge "$pane_top" ] && [ "$ABSOLUTE_CURSOR_Y" -lt "$pane_bottom" ]; then
                        # This pane contains the cursor Y position
                        # Calculate horizontal distance
                        local distance=$((PANE_LEFT - (pane_left + pane_width)))
                        if [ "$distance" -lt "$best_distance" ]; then
                            best_distance="$distance"
                            best_pane="$pane_id"
                        fi
                    fi
                fi
                ;;
            R)
                # Moving right: find panes to the right
                if [ "$pane_left" -gt "$PANE_LEFT" ]; then
                    # Check if cursor Y position falls within this pane's vertical range
                    local pane_bottom=$((pane_top + pane_height))
                    if [ "$ABSOLUTE_CURSOR_Y" -ge "$pane_top" ] && [ "$ABSOLUTE_CURSOR_Y" -lt "$pane_bottom" ]; then
                        # This pane contains the cursor Y position
                        # Calculate horizontal distance
                        local distance=$((pane_left - (PANE_LEFT + PANE_WIDTH)))
                        if [ "$distance" -lt "$best_distance" ]; then
                            best_distance="$distance"
                            best_pane="$pane_id"
                        fi
                    fi
                fi
                ;;
            U)
                # Moving up: find panes above
                if [ "$pane_top" -lt "$PANE_TOP" ]; then
                    # Check if cursor X position falls within this pane's horizontal range
                    local cursor_x=$(tmux display-message -p '#{cursor_x}')
                    local absolute_cursor_x=$((PANE_LEFT + cursor_x))
                    local pane_right=$((pane_left + pane_width))
                    if [ "$absolute_cursor_x" -ge "$pane_left" ] && [ "$absolute_cursor_x" -lt "$pane_right" ]; then
                        # This pane contains the cursor X position
                        # Calculate vertical distance
                        local distance=$((PANE_TOP - (pane_top + pane_height)))
                        if [ "$distance" -lt "$best_distance" ]; then
                            best_distance="$distance"
                            best_pane="$pane_id"
                        fi
                    fi
                fi
                ;;
            D)
                # Moving down: find panes below
                if [ "$pane_top" -gt "$PANE_TOP" ]; then
                    # Check if cursor X position falls within this pane's horizontal range
                    local cursor_x=$(tmux display-message -p '#{cursor_x}')
                    local absolute_cursor_x=$((PANE_LEFT + cursor_x))
                    local pane_right=$((pane_left + pane_width))
                    if [ "$absolute_cursor_x" -ge "$pane_left" ] && [ "$absolute_cursor_x" -lt "$pane_right" ]; then
                        # This pane contains the cursor X position
                        # Calculate vertical distance
                        local distance=$((pane_top - (PANE_TOP + PANE_HEIGHT)))
                        if [ "$distance" -lt "$best_distance" ]; then
                            best_distance="$distance"
                            best_pane="$pane_id"
                        fi
                    fi
                fi
                ;;
        esac
    done <<< "$PANES_INFO"
    
    echo "$best_pane"
}

# Find the best pane to switch to
TARGET_PANE=$(find_best_pane "$DIRECTION")

if [ -n "$TARGET_PANE" ]; then
    # Switch to the target pane
    tmux select-pane -t "$TARGET_PANE"
else
    # No suitable pane found in the direction, try to cycle to opposite edge
    # This maintains cursor position awareness when cycling
    case "$DIRECTION" in
        L)
            # Moving left but no panes to the left, find rightmost pane at cursor Y
            RIGHTMOST_PANE=""
            RIGHTMOST_X=-1
            while IFS=' ' read -r pane_id pane_left pane_top pane_width pane_height; do
                [ "$pane_id" = "$CURRENT_PANE" ] && continue
                pane_bottom=$((pane_top + pane_height))
                pane_right=$((pane_left + pane_width))
                if [ "$ABSOLUTE_CURSOR_Y" -ge "$pane_top" ] && [ "$ABSOLUTE_CURSOR_Y" -lt "$pane_bottom" ]; then
                    if [ "$pane_right" -gt "$RIGHTMOST_X" ]; then
                        RIGHTMOST_X="$pane_right"
                        RIGHTMOST_PANE="$pane_id"
                    fi
                fi
            done <<< "$PANES_INFO"
            if [ -n "$RIGHTMOST_PANE" ]; then
                tmux select-pane -t "$RIGHTMOST_PANE"
            else
                tmux select-pane -"$DIRECTION"
            fi
            ;;
        R)
            # Moving right but no panes to the right, find leftmost pane at cursor Y
            LEFTMOST_PANE=""
            LEFTMOST_X=999999
            while IFS=' ' read -r pane_id pane_left pane_top pane_width pane_height; do
                [ "$pane_id" = "$CURRENT_PANE" ] && continue
                pane_bottom=$((pane_top + pane_height))
                if [ "$ABSOLUTE_CURSOR_Y" -ge "$pane_top" ] && [ "$ABSOLUTE_CURSOR_Y" -lt "$pane_bottom" ]; then
                    if [ "$pane_left" -lt "$LEFTMOST_X" ]; then
                        LEFTMOST_X="$pane_left"
                        LEFTMOST_PANE="$pane_id"
                    fi
                fi
            done <<< "$PANES_INFO"
            if [ -n "$LEFTMOST_PANE" ]; then
                tmux select-pane -t "$LEFTMOST_PANE"
            else
                tmux select-pane -"$DIRECTION"
            fi
            ;;
        U)
            # Moving up but no panes above, find bottommost pane at cursor X
            BOTTOMMOST_PANE=""
            BOTTOMMOST_Y=-1
            cursor_x=$(tmux display-message -p '#{cursor_x}')
            absolute_cursor_x=$((PANE_LEFT + cursor_x))
            while IFS=' ' read -r pane_id pane_left pane_top pane_width pane_height; do
                [ "$pane_id" = "$CURRENT_PANE" ] && continue
                pane_right=$((pane_left + pane_width))
                pane_bottom=$((pane_top + pane_height))
                if [ "$absolute_cursor_x" -ge "$pane_left" ] && [ "$absolute_cursor_x" -lt "$pane_right" ]; then
                    if [ "$pane_bottom" -gt "$BOTTOMMOST_Y" ]; then
                        BOTTOMMOST_Y="$pane_bottom"
                        BOTTOMMOST_PANE="$pane_id"
                    fi
                fi
            done <<< "$PANES_INFO"
            if [ -n "$BOTTOMMOST_PANE" ]; then
                tmux select-pane -t "$BOTTOMMOST_PANE"
            else
                tmux select-pane -"$DIRECTION"
            fi
            ;;
        D)
            # Moving down but no panes below, find topmost pane at cursor X
            TOPMOST_PANE=""
            TOPMOST_Y=999999
            cursor_x=$(tmux display-message -p '#{cursor_x}')
            absolute_cursor_x=$((PANE_LEFT + cursor_x))
            while IFS=' ' read -r pane_id pane_left pane_top pane_width pane_height; do
                [ "$pane_id" = "$CURRENT_PANE" ] && continue
                pane_right=$((pane_left + pane_width))
                if [ "$absolute_cursor_x" -ge "$pane_left" ] && [ "$absolute_cursor_x" -lt "$pane_right" ]; then
                    if [ "$pane_top" -lt "$TOPMOST_Y" ]; then
                        TOPMOST_Y="$pane_top"
                        TOPMOST_PANE="$pane_id"
                    fi
                fi
            done <<< "$PANES_INFO"
            if [ -n "$TOPMOST_PANE" ]; then
                tmux select-pane -t "$TOPMOST_PANE"
            else
                tmux select-pane -"$DIRECTION"
            fi
            ;;
    esac
fi
